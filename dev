#!/usr/bin/env python3
from os import system
import os
from yaml import safe_load as yaml_load
import argparse

def main():
    parser = argparse.ArgumentParser(description='IoT dataset development tools')
    parser.add_argument('command',
        help='Command to execute',
        choices=commands.keys(),
    )
    parser.add_argument('--prod',
        help='Run in production mode',
        default=False,
    )
    parser.add_argument('--app',
        help='Target application',
        required=False,
    )
    args = parser.parse_args()
    apps = load_config()

    commands[args.command](args, apps)

def generate_clients(args, apps):
    system("docker build -t clients_builder -f clients_builder/Dockerfile ./clients_builder")
    system("mkdir -p ./hub/clients")
    system("docker run -v $(pwd)/apps:/apps -v $(pwd)/hub/src/clients:/clients clients_builder")

docker_base_cmds = {
    "dev": "docker-compose -f docker-compose.dev.yml",
    "prod": "docker-compose -f docker-compose.dev.yml -f docker-compose.prod.yml",
}
get_base_cmd = lambda args: docker_base_cmds['prod' if args.prod else 'dev']

def init(args, apps):
    if not os.path.exists(".env-initialized"):
        open(".env-initialized", "w").write("")
    else:
        return

    system("docker network create iot_dataset")
    generate_clients(args, apps)
    docker_build_all(args, apps)

def deps_ubuntu_local(args, apps):
    for app in apps:
        depsPath = os.path.join(f"./apps/{app}/deps_ubuntu.sh")
        if os.path.exists(depsPath):
            system(f"cd apps/{app} && ./deps_ubuntu.sh")
        else:
            print(f"Warning: App {app} does not have a deps_ubuntu.sh file as expected in {depsPath} !!")

def clean_local(args, apps):
    buildFilePath = os.path.join(f"./apps/{args.app}/build")
    if os.path.exists(buildFilePath):
        system(f"rm -rf apps/{args.app}/build")

def clean_local_all(args, apps):
    print(f"Cleaning workspace")
    for app in apps:
        args.app = app
        clean_local(args, apps)
    system(f"rm -rf hub/clients hub/features")

def build_local(args, apps):
    print(f"Building app {args.app}")
    buildFilePath = os.path.join(f"./apps/{args.app}/build.sh")
    if os.path.exists(buildFilePath):
        system(f"mkdir -p apps/{args.app}/build && cd apps/{args.app}/build && ../build.sh")
    else:
        print(f"Warning: expected build file {args.app} missing. But maybe it is a python app !")

def build_local_all(args, apps):
    for app in apps:
        args.app = app
        build_local(args, apps)

def docker_start(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} up {args.app}")

def docker_start_all(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} up")

def docker_build_all(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} build --parallel")

def docker_build(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} build {args.app}")

def docker_run_functional_tests(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} exec hub_app bash -c 'cd src && behave'")

def docker_reload(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} up --build --force-recreate {args.app}")

def docker_restart(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} restart {args.app}")

def docker_shell(args, apps):
    cmd = get_base_cmd(args)
    system(f"{cmd} exec {args.app} bash")

commands = {f.__name__.replace('_', '-'): f for f in [
    generate_clients,
    docker_run_functional_tests,
    docker_start,
    docker_start_all,
    docker_build,
    docker_build_all,
    docker_reload,
    docker_restart,
    docker_shell,
    init,
    deps_ubuntu_local,
    build_local,
    build_local_all,
    clean_local_all,
]}

def load_config():
    config = yaml_load(open("docker-compose.dev.yml"))
    apps = {}
    for service, service_config in config['services'].items():
        if 'labels' in service_config and \
            'type=application' in service_config['labels']:
            apps[service] = service_config
    return apps

if __name__ == '__main__':
    main()
